/*
buildscript {
    configurations.all {
        resolutionStrategy {
            force 'org.stianloader:micromixin-remapper:0.1.0'
        }
    }
}
*/

plugins {
    id 'java'
    id 'java-library'
    id 'gsl-starplane' version '0.2.0-a20240505.2'
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

group 'de.geolykt'
version '0.1.0'

targetCompatibility = compileJava.targetCompatibility = sourceCompatibility = compileJava.sourceCompatibility = '1.8'

repositories {
    mavenLocal()
    maven {
        name 'stianloader-maven'
        url 'https://stianloader.org/maven'
    }
    mavenCentral()
}

starplane {

    withRAS(rootProject.file("src/main/resources/fastergalaxygen.ras"))
    mappingsFile("tinyv2", "newStarmap.tinyv2")


    // If you wish, you can define a directory in which eclipse external annotations (EEA) are contained in.
    // However, this is a feature that is very rarely used, but it's there
    // eclipseEEA = rootProject.file("src/eclipse-eea")
}

runMods {
    from shadowJar
    maxHeapSize = "16G"
}

configurations {
    dependencyMods
    compileOnlyApi.extendsFrom(dependencyMods)
    compileOnlyApi.extendsFrom(devRuntime)
    compileOnlyApi.extendsFrom(galimulatorDependencies)
}

deployMods {
    from configurations["dependencyMods"]
}

dependencies {
    // The versions of SLAPI are listed here: https://stianloader.org/maven/de/geolykt/starloader-api/
    dependencyMods("de.geolykt:starloader-api:2.0.0-a20240505.1")
    // FAST; Having a fast starlane connection algorithm is quite necessary for generating larger galaxies
    // dependencyMods("de.geolykt:fast-asynchronous-starlane-triangulator:1.1.0")
    // The versions of launcher-micromixin are listed here: https://stianloader.org/maven/org/stianloader/launcher-micromixin/
    devRuntime "org.stianloader:launcher-micromixin:4.0.0-a20240227"
    compileOnly "org.stianloader:micromixin-annotations:0.4.0-a20240227"
    compileOnly "de.geolykt.starloader:starplane-annotations:1.0.0"
    compileOnlyApi "org.jetbrains:annotations:24.1.0"

    // Including external libraries (in below case, the tenpatch library) is done like below:
    // Unlike most minecraft mod loaders, the stianloader tooling does not support jar-in-jars.
    // Instead the dependencies must be shaded in traditionally either through bog standard copying of source files
    // or via the gradle shadow plugin. Note: It might be useful to relocate dependencies, which is not done
    // in this example. Not doing so might cause different mods to be incompatible with each other, although
    // SLL classloading shouldn't instantly blow up if two independent mods shade in the same dependency for as long
    // as they do not depend on each other.
    /*
    implementation('com.github.raeleus.TenPatch:tenpatch:5.2.3') {
        exclude group: 'com.badlogicgames.gdx', module: 'gdx'
    }
    */
}

remapJar {
    archiveClassifier = 'remapped'
    fromJar shadowJar
    inputs.file shadowJar.archiveFile

    manifest {
        attributes 'Multi-Release': true
    }
}

build {
    dependsOn remapJar
}

// The below block is only really needed when shading in external dependencies, see
// https://github.com/Starloader-project/GslStarplane/tree/6a3c5e0e190fb948badac89469012e2a172fcb90?tab=readme-ov-file#dealing-with-shaded-dependencies
// However, having this block generally doesn't hurt for as long as you are aware of
// the differences of api/implementation and compileOnlyApi/compileOnly.
genEclipseRuns {
    additionalRuntimeDependency("main", configurations["runtimeClasspath"])
}


// Multi-release jar shenanigans
sourceSets {
    java21 {
        java {
            compileClasspath += main.compileClasspath
            compileClasspath += main.output
            java.setSrcDirs(new java.util.ArrayList())
            java.srcDir(getProjectDir().toPath().resolve('src/main/java21'))
        }
    }
}

compileJava21Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
    dependsOn compileJava

    sourceCompatibility = '21'
    targetCompatibility = '21'
    modularity.inferModulePath.set(false)
}

// Actual Multi-release jar generation
jar {
    dependsOn compileJava21Java

    into('META-INF/versions/21') {
        from sourceSets.java21.output
    }

    manifest {
        attributes 'Multi-Release': true
    }
}
